<?php


/**
 * This class adds structure of 'property' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Jul  9 13:35:05 2009
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PropertyMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PropertyMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(PropertyPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(PropertyPeer::TABLE_NAME);
		$tMap->setPhpName('Property');
		$tMap->setClassname('Property');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, null);

		$tMap->addColumn('SLUG', 'Slug', 'VARCHAR', false, 255);

		$tMap->addColumn('MUNICIPALITY', 'Municipality', 'VARCHAR', true, 255);

		$tMap->addColumn('ADDRESS', 'Address', 'VARCHAR', false, 255);

		$tMap->addColumn('AREA', 'Area', 'VARCHAR', false, 255);

		$tMap->addForeignKey('OFFER_ID', 'OfferId', 'INTEGER', 'offer', 'ID', true, null);

		$tMap->addForeignKey('TYPE_ID', 'TypeId', 'INTEGER', 'type', 'ID', true, null);

		$tMap->addForeignKey('TYPOLOGY_ID', 'TypologyId', 'INTEGER', 'typology', 'ID', true, null);

		$tMap->addColumn('DESCRIPTION', 'Description', 'LONGVARCHAR', true, null);

		$tMap->addForeignKey('STATE_ID', 'StateId', 'INTEGER', 'state', 'ID', true, null);

		$tMap->addColumn('YEAR', 'Year', 'INTEGER', false, null);

		$tMap->addColumn('FLOORS', 'Floors', 'INTEGER', false, null);

		$tMap->addColumn('ON_FLOOR', 'OnFloor', 'INTEGER', false, null);

		$tMap->addColumn('SURFACE', 'Surface', 'FLOAT', true, null);

		$tMap->addColumn('HEATING', 'Heating', 'VARCHAR', false, 255);

		$tMap->addColumn('GARDEN', 'Garden', 'BOOLEAN', false, null);

		$tMap->addColumn('BALCONY', 'Balcony', 'INTEGER', false, null);

		$tMap->addColumn('BATH', 'Bath', 'INTEGER', false, null);

		$tMap->addColumn('BEDROOM', 'Bedroom', 'INTEGER', false, null);

		$tMap->addColumn('ENTRANCE', 'Entrance', 'INTEGER', false, null);

		$tMap->addForeignKey('KITCHEN_ID', 'KitchenId', 'INTEGER', 'kitchen', 'ID', true, null);

		$tMap->addColumn('DININGROOM', 'Diningroom', 'BOOLEAN', false, null);

		$tMap->addColumn('LIVINGROOM', 'Livingroom', 'BOOLEAN', false, null);

		$tMap->addColumn('CELLAR', 'Cellar', 'BOOLEAN', false, null);

		$tMap->addColumn('LIFT', 'Lift', 'BOOLEAN', false, null);

		$tMap->addColumn('ATTIC', 'Attic', 'BOOLEAN', false, null);

		$tMap->addColumn('PARKING', 'Parking', 'INTEGER', false, null);

		$tMap->addColumn('PRICE', 'Price', 'FLOAT', true, null);

		$tMap->addColumn('IS_PUBLIC', 'IsPublic', 'BOOLEAN', true, null);

		$tMap->addColumn('HAS_PRIORITY', 'HasPriority', 'BOOLEAN', false, null);

		$tMap->addForeignKey('SF_ASSET_FOLDER_ID', 'SfAssetFolderId', 'INTEGER', 'sf_asset_folder', 'ID', false, null);

		$tMap->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null);

		$tMap->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null);

	} // doBuild()

} // PropertyMapBuilder
