<?php

/**
 * Base class that represents a row from the 'property' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Jul  9 13:35:05 2009
 *
 * @package    lib.model.om
 */
abstract class BaseProperty extends BaseObject  implements Persistent {


  const PEER = 'PropertyPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PropertyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the slug field.
	 * @var        string
	 */
	protected $slug;

	/**
	 * The value for the municipality field.
	 * @var        string
	 */
	protected $municipality;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the area field.
	 * @var        string
	 */
	protected $area;

	/**
	 * The value for the offer_id field.
	 * @var        int
	 */
	protected $offer_id;

	/**
	 * The value for the type_id field.
	 * @var        int
	 */
	protected $type_id;

	/**
	 * The value for the typology_id field.
	 * @var        int
	 */
	protected $typology_id;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the state_id field.
	 * @var        int
	 */
	protected $state_id;

	/**
	 * The value for the year field.
	 * @var        int
	 */
	protected $year;

	/**
	 * The value for the floors field.
	 * @var        int
	 */
	protected $floors;

	/**
	 * The value for the on_floor field.
	 * @var        int
	 */
	protected $on_floor;

	/**
	 * The value for the surface field.
	 * @var        double
	 */
	protected $surface;

	/**
	 * The value for the heating field.
	 * @var        string
	 */
	protected $heating;

	/**
	 * The value for the garden field.
	 * @var        boolean
	 */
	protected $garden;

	/**
	 * The value for the balcony field.
	 * @var        int
	 */
	protected $balcony;

	/**
	 * The value for the bath field.
	 * @var        int
	 */
	protected $bath;

	/**
	 * The value for the bedroom field.
	 * @var        int
	 */
	protected $bedroom;

	/**
	 * The value for the entrance field.
	 * @var        int
	 */
	protected $entrance;

	/**
	 * The value for the kitchen_id field.
	 * @var        int
	 */
	protected $kitchen_id;

	/**
	 * The value for the diningroom field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $diningroom;

	/**
	 * The value for the livingroom field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $livingroom;

	/**
	 * The value for the cellar field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $cellar;

	/**
	 * The value for the lift field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $lift;

	/**
	 * The value for the attic field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $attic;

	/**
	 * The value for the parking field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $parking;

	/**
	 * The value for the price field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $price;

	/**
	 * The value for the is_public field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_public;

	/**
	 * The value for the has_priority field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $has_priority;

	/**
	 * The value for the sf_asset_folder_id field.
	 * @var        int
	 */
	protected $sf_asset_folder_id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Offer
	 */
	protected $aOffer;

	/**
	 * @var        Type
	 */
	protected $aType;

	/**
	 * @var        Typology
	 */
	protected $aTypology;

	/**
	 * @var        State
	 */
	protected $aState;

	/**
	 * @var        Kitchen
	 */
	protected $aKitchen;

	/**
	 * @var        sfAssetFolder
	 */
	protected $asfAssetFolder;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseProperty object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->diningroom = false;
		$this->livingroom = false;
		$this->cellar = false;
		$this->lift = false;
		$this->attic = false;
		$this->parking = 0;
		$this->price = 0;
		$this->is_public = false;
		$this->has_priority = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [slug] column value.
	 * 
	 * @return     string
	 */
	public function getSlug()
	{
		return $this->slug;
	}

	/**
	 * Get the [municipality] column value.
	 * 
	 * @return     string
	 */
	public function getMunicipality()
	{
		return $this->municipality;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [area] column value.
	 * 
	 * @return     string
	 */
	public function getArea()
	{
		return $this->area;
	}

	/**
	 * Get the [offer_id] column value.
	 * 
	 * @return     int
	 */
	public function getOfferId()
	{
		return $this->offer_id;
	}

	/**
	 * Get the [type_id] column value.
	 * 
	 * @return     int
	 */
	public function getTypeId()
	{
		return $this->type_id;
	}

	/**
	 * Get the [typology_id] column value.
	 * 
	 * @return     int
	 */
	public function getTypologyId()
	{
		return $this->typology_id;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [state_id] column value.
	 * 
	 * @return     int
	 */
	public function getStateId()
	{
		return $this->state_id;
	}

	/**
	 * Get the [year] column value.
	 * 
	 * @return     int
	 */
	public function getYear()
	{
		return $this->year;
	}

	/**
	 * Get the [floors] column value.
	 * 
	 * @return     int
	 */
	public function getFloors()
	{
		return $this->floors;
	}

	/**
	 * Get the [on_floor] column value.
	 * 
	 * @return     int
	 */
	public function getOnFloor()
	{
		return $this->on_floor;
	}

	/**
	 * Get the [surface] column value.
	 * 
	 * @return     double
	 */
	public function getSurface()
	{
		return $this->surface;
	}

	/**
	 * Get the [heating] column value.
	 * 
	 * @return     string
	 */
	public function getHeating()
	{
		return $this->heating;
	}

	/**
	 * Get the [garden] column value.
	 * 
	 * @return     boolean
	 */
	public function getGarden()
	{
		return $this->garden;
	}

	/**
	 * Get the [balcony] column value.
	 * 
	 * @return     int
	 */
	public function getBalcony()
	{
		return $this->balcony;
	}

	/**
	 * Get the [bath] column value.
	 * 
	 * @return     int
	 */
	public function getBath()
	{
		return $this->bath;
	}

	/**
	 * Get the [bedroom] column value.
	 * 
	 * @return     int
	 */
	public function getBedroom()
	{
		return $this->bedroom;
	}

	/**
	 * Get the [entrance] column value.
	 * 
	 * @return     int
	 */
	public function getEntrance()
	{
		return $this->entrance;
	}

	/**
	 * Get the [kitchen_id] column value.
	 * 
	 * @return     int
	 */
	public function getKitchenId()
	{
		return $this->kitchen_id;
	}

	/**
	 * Get the [diningroom] column value.
	 * 
	 * @return     boolean
	 */
	public function getDiningroom()
	{
		return $this->diningroom;
	}

	/**
	 * Get the [livingroom] column value.
	 * 
	 * @return     boolean
	 */
	public function getLivingroom()
	{
		return $this->livingroom;
	}

	/**
	 * Get the [cellar] column value.
	 * 
	 * @return     boolean
	 */
	public function getCellar()
	{
		return $this->cellar;
	}

	/**
	 * Get the [lift] column value.
	 * 
	 * @return     boolean
	 */
	public function getLift()
	{
		return $this->lift;
	}

	/**
	 * Get the [attic] column value.
	 * 
	 * @return     boolean
	 */
	public function getAttic()
	{
		return $this->attic;
	}

	/**
	 * Get the [parking] column value.
	 * 
	 * @return     int
	 */
	public function getParking()
	{
		return $this->parking;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     double
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [is_public] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPublic()
	{
		return $this->is_public;
	}

	/**
	 * Get the [has_priority] column value.
	 * 
	 * @return     boolean
	 */
	public function getHasPriority()
	{
		return $this->has_priority;
	}

	/**
	 * Get the [sf_asset_folder_id] column value.
	 * 
	 * @return     int
	 */
	public function getSfAssetFolderId()
	{
		return $this->sf_asset_folder_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PropertyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [slug] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setSlug($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->slug !== $v) {
			$this->slug = $v;
			$this->modifiedColumns[] = PropertyPeer::SLUG;
		}

		return $this;
	} // setSlug()

	/**
	 * Set the value of [municipality] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setMunicipality($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->municipality !== $v) {
			$this->municipality = $v;
			$this->modifiedColumns[] = PropertyPeer::MUNICIPALITY;
		}

		return $this;
	} // setMunicipality()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = PropertyPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [area] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setArea($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->area !== $v) {
			$this->area = $v;
			$this->modifiedColumns[] = PropertyPeer::AREA;
		}

		return $this;
	} // setArea()

	/**
	 * Set the value of [offer_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setOfferId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->offer_id !== $v) {
			$this->offer_id = $v;
			$this->modifiedColumns[] = PropertyPeer::OFFER_ID;
		}

		if ($this->aOffer !== null && $this->aOffer->getId() !== $v) {
			$this->aOffer = null;
		}

		return $this;
	} // setOfferId()

	/**
	 * Set the value of [type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->type_id !== $v) {
			$this->type_id = $v;
			$this->modifiedColumns[] = PropertyPeer::TYPE_ID;
		}

		if ($this->aType !== null && $this->aType->getId() !== $v) {
			$this->aType = null;
		}

		return $this;
	} // setTypeId()

	/**
	 * Set the value of [typology_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setTypologyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->typology_id !== $v) {
			$this->typology_id = $v;
			$this->modifiedColumns[] = PropertyPeer::TYPOLOGY_ID;
		}

		if ($this->aTypology !== null && $this->aTypology->getId() !== $v) {
			$this->aTypology = null;
		}

		return $this;
	} // setTypologyId()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = PropertyPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [state_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setStateId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->state_id !== $v) {
			$this->state_id = $v;
			$this->modifiedColumns[] = PropertyPeer::STATE_ID;
		}

		if ($this->aState !== null && $this->aState->getId() !== $v) {
			$this->aState = null;
		}

		return $this;
	} // setStateId()

	/**
	 * Set the value of [year] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setYear($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->year !== $v) {
			$this->year = $v;
			$this->modifiedColumns[] = PropertyPeer::YEAR;
		}

		return $this;
	} // setYear()

	/**
	 * Set the value of [floors] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setFloors($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->floors !== $v) {
			$this->floors = $v;
			$this->modifiedColumns[] = PropertyPeer::FLOORS;
		}

		return $this;
	} // setFloors()

	/**
	 * Set the value of [on_floor] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setOnFloor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->on_floor !== $v) {
			$this->on_floor = $v;
			$this->modifiedColumns[] = PropertyPeer::ON_FLOOR;
		}

		return $this;
	} // setOnFloor()

	/**
	 * Set the value of [surface] column.
	 * 
	 * @param      double $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setSurface($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->surface !== $v) {
			$this->surface = $v;
			$this->modifiedColumns[] = PropertyPeer::SURFACE;
		}

		return $this;
	} // setSurface()

	/**
	 * Set the value of [heating] column.
	 * 
	 * @param      string $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setHeating($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->heating !== $v) {
			$this->heating = $v;
			$this->modifiedColumns[] = PropertyPeer::HEATING;
		}

		return $this;
	} // setHeating()

	/**
	 * Set the value of [garden] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setGarden($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->garden !== $v) {
			$this->garden = $v;
			$this->modifiedColumns[] = PropertyPeer::GARDEN;
		}

		return $this;
	} // setGarden()

	/**
	 * Set the value of [balcony] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setBalcony($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->balcony !== $v) {
			$this->balcony = $v;
			$this->modifiedColumns[] = PropertyPeer::BALCONY;
		}

		return $this;
	} // setBalcony()

	/**
	 * Set the value of [bath] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setBath($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->bath !== $v) {
			$this->bath = $v;
			$this->modifiedColumns[] = PropertyPeer::BATH;
		}

		return $this;
	} // setBath()

	/**
	 * Set the value of [bedroom] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setBedroom($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->bedroom !== $v) {
			$this->bedroom = $v;
			$this->modifiedColumns[] = PropertyPeer::BEDROOM;
		}

		return $this;
	} // setBedroom()

	/**
	 * Set the value of [entrance] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setEntrance($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->entrance !== $v) {
			$this->entrance = $v;
			$this->modifiedColumns[] = PropertyPeer::ENTRANCE;
		}

		return $this;
	} // setEntrance()

	/**
	 * Set the value of [kitchen_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setKitchenId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->kitchen_id !== $v) {
			$this->kitchen_id = $v;
			$this->modifiedColumns[] = PropertyPeer::KITCHEN_ID;
		}

		if ($this->aKitchen !== null && $this->aKitchen->getId() !== $v) {
			$this->aKitchen = null;
		}

		return $this;
	} // setKitchenId()

	/**
	 * Set the value of [diningroom] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setDiningroom($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->diningroom !== $v || $v === false) {
			$this->diningroom = $v;
			$this->modifiedColumns[] = PropertyPeer::DININGROOM;
		}

		return $this;
	} // setDiningroom()

	/**
	 * Set the value of [livingroom] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setLivingroom($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->livingroom !== $v || $v === false) {
			$this->livingroom = $v;
			$this->modifiedColumns[] = PropertyPeer::LIVINGROOM;
		}

		return $this;
	} // setLivingroom()

	/**
	 * Set the value of [cellar] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setCellar($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cellar !== $v || $v === false) {
			$this->cellar = $v;
			$this->modifiedColumns[] = PropertyPeer::CELLAR;
		}

		return $this;
	} // setCellar()

	/**
	 * Set the value of [lift] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setLift($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->lift !== $v || $v === false) {
			$this->lift = $v;
			$this->modifiedColumns[] = PropertyPeer::LIFT;
		}

		return $this;
	} // setLift()

	/**
	 * Set the value of [attic] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setAttic($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->attic !== $v || $v === false) {
			$this->attic = $v;
			$this->modifiedColumns[] = PropertyPeer::ATTIC;
		}

		return $this;
	} // setAttic()

	/**
	 * Set the value of [parking] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setParking($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->parking !== $v || $v === 0) {
			$this->parking = $v;
			$this->modifiedColumns[] = PropertyPeer::PARKING;
		}

		return $this;
	} // setParking()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      double $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->price !== $v || $v === 0) {
			$this->price = $v;
			$this->modifiedColumns[] = PropertyPeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [is_public] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setIsPublic($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_public !== $v || $v === false) {
			$this->is_public = $v;
			$this->modifiedColumns[] = PropertyPeer::IS_PUBLIC;
		}

		return $this;
	} // setIsPublic()

	/**
	 * Set the value of [has_priority] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setHasPriority($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->has_priority !== $v || $v === false) {
			$this->has_priority = $v;
			$this->modifiedColumns[] = PropertyPeer::HAS_PRIORITY;
		}

		return $this;
	} // setHasPriority()

	/**
	 * Set the value of [sf_asset_folder_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Property The current object (for fluent API support)
	 */
	public function setSfAssetFolderId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sf_asset_folder_id !== $v) {
			$this->sf_asset_folder_id = $v;
			$this->modifiedColumns[] = PropertyPeer::SF_ASSET_FOLDER_ID;
		}

		if ($this->asfAssetFolder !== null && $this->asfAssetFolder->getId() !== $v) {
			$this->asfAssetFolder = null;
		}

		return $this;
	} // setSfAssetFolderId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Property The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PropertyPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Property The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PropertyPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(PropertyPeer::DININGROOM,PropertyPeer::LIVINGROOM,PropertyPeer::CELLAR,PropertyPeer::LIFT,PropertyPeer::ATTIC,PropertyPeer::PARKING,PropertyPeer::PRICE,PropertyPeer::IS_PUBLIC,PropertyPeer::HAS_PRIORITY))) {
				return false;
			}

			if ($this->diningroom !== false) {
				return false;
			}

			if ($this->livingroom !== false) {
				return false;
			}

			if ($this->cellar !== false) {
				return false;
			}

			if ($this->lift !== false) {
				return false;
			}

			if ($this->attic !== false) {
				return false;
			}

			if ($this->parking !== 0) {
				return false;
			}

			if ($this->price !== 0) {
				return false;
			}

			if ($this->is_public !== false) {
				return false;
			}

			if ($this->has_priority !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->slug = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->municipality = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->address = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->area = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->offer_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->type_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->typology_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->description = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->state_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->year = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->floors = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->on_floor = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->surface = ($row[$startcol + 13] !== null) ? (double) $row[$startcol + 13] : null;
			$this->heating = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->garden = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->balcony = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->bath = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->bedroom = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->entrance = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->kitchen_id = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->diningroom = ($row[$startcol + 21] !== null) ? (boolean) $row[$startcol + 21] : null;
			$this->livingroom = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->cellar = ($row[$startcol + 23] !== null) ? (boolean) $row[$startcol + 23] : null;
			$this->lift = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->attic = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
			$this->parking = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->price = ($row[$startcol + 27] !== null) ? (double) $row[$startcol + 27] : null;
			$this->is_public = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->has_priority = ($row[$startcol + 29] !== null) ? (boolean) $row[$startcol + 29] : null;
			$this->sf_asset_folder_id = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->created_at = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->updated_at = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 33; // 33 = PropertyPeer::NUM_COLUMNS - PropertyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Property object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aOffer !== null && $this->offer_id !== $this->aOffer->getId()) {
			$this->aOffer = null;
		}
		if ($this->aType !== null && $this->type_id !== $this->aType->getId()) {
			$this->aType = null;
		}
		if ($this->aTypology !== null && $this->typology_id !== $this->aTypology->getId()) {
			$this->aTypology = null;
		}
		if ($this->aState !== null && $this->state_id !== $this->aState->getId()) {
			$this->aState = null;
		}
		if ($this->aKitchen !== null && $this->kitchen_id !== $this->aKitchen->getId()) {
			$this->aKitchen = null;
		}
		if ($this->asfAssetFolder !== null && $this->sf_asset_folder_id !== $this->asfAssetFolder->getId()) {
			$this->asfAssetFolder = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PropertyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aOffer = null;
			$this->aType = null;
			$this->aTypology = null;
			$this->aState = null;
			$this->aKitchen = null;
			$this->asfAssetFolder = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProperty:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PropertyPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseProperty:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProperty:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(PropertyPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(PropertyPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PropertyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseProperty:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PropertyPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOffer !== null) {
				if ($this->aOffer->isModified() || $this->aOffer->isNew()) {
					$affectedRows += $this->aOffer->save($con);
				}
				$this->setOffer($this->aOffer);
			}

			if ($this->aType !== null) {
				if ($this->aType->isModified() || $this->aType->isNew()) {
					$affectedRows += $this->aType->save($con);
				}
				$this->setType($this->aType);
			}

			if ($this->aTypology !== null) {
				if ($this->aTypology->isModified() || $this->aTypology->isNew()) {
					$affectedRows += $this->aTypology->save($con);
				}
				$this->setTypology($this->aTypology);
			}

			if ($this->aState !== null) {
				if ($this->aState->isModified() || $this->aState->isNew()) {
					$affectedRows += $this->aState->save($con);
				}
				$this->setState($this->aState);
			}

			if ($this->aKitchen !== null) {
				if ($this->aKitchen->isModified() || $this->aKitchen->isNew()) {
					$affectedRows += $this->aKitchen->save($con);
				}
				$this->setKitchen($this->aKitchen);
			}

			if ($this->asfAssetFolder !== null) {
				if ($this->asfAssetFolder->isModified() || $this->asfAssetFolder->isNew()) {
					$affectedRows += $this->asfAssetFolder->save($con);
				}
				$this->setsfAssetFolder($this->asfAssetFolder);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PropertyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PropertyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PropertyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOffer !== null) {
				if (!$this->aOffer->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOffer->getValidationFailures());
				}
			}

			if ($this->aType !== null) {
				if (!$this->aType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aType->getValidationFailures());
				}
			}

			if ($this->aTypology !== null) {
				if (!$this->aTypology->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTypology->getValidationFailures());
				}
			}

			if ($this->aState !== null) {
				if (!$this->aState->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aState->getValidationFailures());
				}
			}

			if ($this->aKitchen !== null) {
				if (!$this->aKitchen->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aKitchen->getValidationFailures());
				}
			}

			if ($this->asfAssetFolder !== null) {
				if (!$this->asfAssetFolder->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfAssetFolder->getValidationFailures());
				}
			}


			if (($retval = PropertyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropertyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getSlug();
				break;
			case 2:
				return $this->getMunicipality();
				break;
			case 3:
				return $this->getAddress();
				break;
			case 4:
				return $this->getArea();
				break;
			case 5:
				return $this->getOfferId();
				break;
			case 6:
				return $this->getTypeId();
				break;
			case 7:
				return $this->getTypologyId();
				break;
			case 8:
				return $this->getDescription();
				break;
			case 9:
				return $this->getStateId();
				break;
			case 10:
				return $this->getYear();
				break;
			case 11:
				return $this->getFloors();
				break;
			case 12:
				return $this->getOnFloor();
				break;
			case 13:
				return $this->getSurface();
				break;
			case 14:
				return $this->getHeating();
				break;
			case 15:
				return $this->getGarden();
				break;
			case 16:
				return $this->getBalcony();
				break;
			case 17:
				return $this->getBath();
				break;
			case 18:
				return $this->getBedroom();
				break;
			case 19:
				return $this->getEntrance();
				break;
			case 20:
				return $this->getKitchenId();
				break;
			case 21:
				return $this->getDiningroom();
				break;
			case 22:
				return $this->getLivingroom();
				break;
			case 23:
				return $this->getCellar();
				break;
			case 24:
				return $this->getLift();
				break;
			case 25:
				return $this->getAttic();
				break;
			case 26:
				return $this->getParking();
				break;
			case 27:
				return $this->getPrice();
				break;
			case 28:
				return $this->getIsPublic();
				break;
			case 29:
				return $this->getHasPriority();
				break;
			case 30:
				return $this->getSfAssetFolderId();
				break;
			case 31:
				return $this->getCreatedAt();
				break;
			case 32:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PropertyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getSlug(),
			$keys[2] => $this->getMunicipality(),
			$keys[3] => $this->getAddress(),
			$keys[4] => $this->getArea(),
			$keys[5] => $this->getOfferId(),
			$keys[6] => $this->getTypeId(),
			$keys[7] => $this->getTypologyId(),
			$keys[8] => $this->getDescription(),
			$keys[9] => $this->getStateId(),
			$keys[10] => $this->getYear(),
			$keys[11] => $this->getFloors(),
			$keys[12] => $this->getOnFloor(),
			$keys[13] => $this->getSurface(),
			$keys[14] => $this->getHeating(),
			$keys[15] => $this->getGarden(),
			$keys[16] => $this->getBalcony(),
			$keys[17] => $this->getBath(),
			$keys[18] => $this->getBedroom(),
			$keys[19] => $this->getEntrance(),
			$keys[20] => $this->getKitchenId(),
			$keys[21] => $this->getDiningroom(),
			$keys[22] => $this->getLivingroom(),
			$keys[23] => $this->getCellar(),
			$keys[24] => $this->getLift(),
			$keys[25] => $this->getAttic(),
			$keys[26] => $this->getParking(),
			$keys[27] => $this->getPrice(),
			$keys[28] => $this->getIsPublic(),
			$keys[29] => $this->getHasPriority(),
			$keys[30] => $this->getSfAssetFolderId(),
			$keys[31] => $this->getCreatedAt(),
			$keys[32] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PropertyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setSlug($value);
				break;
			case 2:
				$this->setMunicipality($value);
				break;
			case 3:
				$this->setAddress($value);
				break;
			case 4:
				$this->setArea($value);
				break;
			case 5:
				$this->setOfferId($value);
				break;
			case 6:
				$this->setTypeId($value);
				break;
			case 7:
				$this->setTypologyId($value);
				break;
			case 8:
				$this->setDescription($value);
				break;
			case 9:
				$this->setStateId($value);
				break;
			case 10:
				$this->setYear($value);
				break;
			case 11:
				$this->setFloors($value);
				break;
			case 12:
				$this->setOnFloor($value);
				break;
			case 13:
				$this->setSurface($value);
				break;
			case 14:
				$this->setHeating($value);
				break;
			case 15:
				$this->setGarden($value);
				break;
			case 16:
				$this->setBalcony($value);
				break;
			case 17:
				$this->setBath($value);
				break;
			case 18:
				$this->setBedroom($value);
				break;
			case 19:
				$this->setEntrance($value);
				break;
			case 20:
				$this->setKitchenId($value);
				break;
			case 21:
				$this->setDiningroom($value);
				break;
			case 22:
				$this->setLivingroom($value);
				break;
			case 23:
				$this->setCellar($value);
				break;
			case 24:
				$this->setLift($value);
				break;
			case 25:
				$this->setAttic($value);
				break;
			case 26:
				$this->setParking($value);
				break;
			case 27:
				$this->setPrice($value);
				break;
			case 28:
				$this->setIsPublic($value);
				break;
			case 29:
				$this->setHasPriority($value);
				break;
			case 30:
				$this->setSfAssetFolderId($value);
				break;
			case 31:
				$this->setCreatedAt($value);
				break;
			case 32:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PropertyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSlug($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setMunicipality($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAddress($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setArea($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setOfferId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTypeId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTypologyId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDescription($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setStateId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setYear($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFloors($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOnFloor($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSurface($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setHeating($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setGarden($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setBalcony($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setBath($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setBedroom($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setEntrance($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setKitchenId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDiningroom($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setLivingroom($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCellar($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setLift($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setAttic($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setParking($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setPrice($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setIsPublic($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setHasPriority($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setSfAssetFolderId($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCreatedAt($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setUpdatedAt($arr[$keys[32]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PropertyPeer::DATABASE_NAME);

		if ($this->isColumnModified(PropertyPeer::ID)) $criteria->add(PropertyPeer::ID, $this->id);
		if ($this->isColumnModified(PropertyPeer::SLUG)) $criteria->add(PropertyPeer::SLUG, $this->slug);
		if ($this->isColumnModified(PropertyPeer::MUNICIPALITY)) $criteria->add(PropertyPeer::MUNICIPALITY, $this->municipality);
		if ($this->isColumnModified(PropertyPeer::ADDRESS)) $criteria->add(PropertyPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(PropertyPeer::AREA)) $criteria->add(PropertyPeer::AREA, $this->area);
		if ($this->isColumnModified(PropertyPeer::OFFER_ID)) $criteria->add(PropertyPeer::OFFER_ID, $this->offer_id);
		if ($this->isColumnModified(PropertyPeer::TYPE_ID)) $criteria->add(PropertyPeer::TYPE_ID, $this->type_id);
		if ($this->isColumnModified(PropertyPeer::TYPOLOGY_ID)) $criteria->add(PropertyPeer::TYPOLOGY_ID, $this->typology_id);
		if ($this->isColumnModified(PropertyPeer::DESCRIPTION)) $criteria->add(PropertyPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(PropertyPeer::STATE_ID)) $criteria->add(PropertyPeer::STATE_ID, $this->state_id);
		if ($this->isColumnModified(PropertyPeer::YEAR)) $criteria->add(PropertyPeer::YEAR, $this->year);
		if ($this->isColumnModified(PropertyPeer::FLOORS)) $criteria->add(PropertyPeer::FLOORS, $this->floors);
		if ($this->isColumnModified(PropertyPeer::ON_FLOOR)) $criteria->add(PropertyPeer::ON_FLOOR, $this->on_floor);
		if ($this->isColumnModified(PropertyPeer::SURFACE)) $criteria->add(PropertyPeer::SURFACE, $this->surface);
		if ($this->isColumnModified(PropertyPeer::HEATING)) $criteria->add(PropertyPeer::HEATING, $this->heating);
		if ($this->isColumnModified(PropertyPeer::GARDEN)) $criteria->add(PropertyPeer::GARDEN, $this->garden);
		if ($this->isColumnModified(PropertyPeer::BALCONY)) $criteria->add(PropertyPeer::BALCONY, $this->balcony);
		if ($this->isColumnModified(PropertyPeer::BATH)) $criteria->add(PropertyPeer::BATH, $this->bath);
		if ($this->isColumnModified(PropertyPeer::BEDROOM)) $criteria->add(PropertyPeer::BEDROOM, $this->bedroom);
		if ($this->isColumnModified(PropertyPeer::ENTRANCE)) $criteria->add(PropertyPeer::ENTRANCE, $this->entrance);
		if ($this->isColumnModified(PropertyPeer::KITCHEN_ID)) $criteria->add(PropertyPeer::KITCHEN_ID, $this->kitchen_id);
		if ($this->isColumnModified(PropertyPeer::DININGROOM)) $criteria->add(PropertyPeer::DININGROOM, $this->diningroom);
		if ($this->isColumnModified(PropertyPeer::LIVINGROOM)) $criteria->add(PropertyPeer::LIVINGROOM, $this->livingroom);
		if ($this->isColumnModified(PropertyPeer::CELLAR)) $criteria->add(PropertyPeer::CELLAR, $this->cellar);
		if ($this->isColumnModified(PropertyPeer::LIFT)) $criteria->add(PropertyPeer::LIFT, $this->lift);
		if ($this->isColumnModified(PropertyPeer::ATTIC)) $criteria->add(PropertyPeer::ATTIC, $this->attic);
		if ($this->isColumnModified(PropertyPeer::PARKING)) $criteria->add(PropertyPeer::PARKING, $this->parking);
		if ($this->isColumnModified(PropertyPeer::PRICE)) $criteria->add(PropertyPeer::PRICE, $this->price);
		if ($this->isColumnModified(PropertyPeer::IS_PUBLIC)) $criteria->add(PropertyPeer::IS_PUBLIC, $this->is_public);
		if ($this->isColumnModified(PropertyPeer::HAS_PRIORITY)) $criteria->add(PropertyPeer::HAS_PRIORITY, $this->has_priority);
		if ($this->isColumnModified(PropertyPeer::SF_ASSET_FOLDER_ID)) $criteria->add(PropertyPeer::SF_ASSET_FOLDER_ID, $this->sf_asset_folder_id);
		if ($this->isColumnModified(PropertyPeer::CREATED_AT)) $criteria->add(PropertyPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(PropertyPeer::UPDATED_AT)) $criteria->add(PropertyPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PropertyPeer::DATABASE_NAME);

		$criteria->add(PropertyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Property (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSlug($this->slug);

		$copyObj->setMunicipality($this->municipality);

		$copyObj->setAddress($this->address);

		$copyObj->setArea($this->area);

		$copyObj->setOfferId($this->offer_id);

		$copyObj->setTypeId($this->type_id);

		$copyObj->setTypologyId($this->typology_id);

		$copyObj->setDescription($this->description);

		$copyObj->setStateId($this->state_id);

		$copyObj->setYear($this->year);

		$copyObj->setFloors($this->floors);

		$copyObj->setOnFloor($this->on_floor);

		$copyObj->setSurface($this->surface);

		$copyObj->setHeating($this->heating);

		$copyObj->setGarden($this->garden);

		$copyObj->setBalcony($this->balcony);

		$copyObj->setBath($this->bath);

		$copyObj->setBedroom($this->bedroom);

		$copyObj->setEntrance($this->entrance);

		$copyObj->setKitchenId($this->kitchen_id);

		$copyObj->setDiningroom($this->diningroom);

		$copyObj->setLivingroom($this->livingroom);

		$copyObj->setCellar($this->cellar);

		$copyObj->setLift($this->lift);

		$copyObj->setAttic($this->attic);

		$copyObj->setParking($this->parking);

		$copyObj->setPrice($this->price);

		$copyObj->setIsPublic($this->is_public);

		$copyObj->setHasPriority($this->has_priority);

		$copyObj->setSfAssetFolderId($this->sf_asset_folder_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Property Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PropertyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PropertyPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Offer object.
	 *
	 * @param      Offer $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOffer(Offer $v = null)
	{
		if ($v === null) {
			$this->setOfferId(NULL);
		} else {
			$this->setOfferId($v->getId());
		}

		$this->aOffer = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Offer object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated Offer object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Offer The associated Offer object.
	 * @throws     PropelException
	 */
	public function getOffer(PropelPDO $con = null)
	{
		if ($this->aOffer === null && ($this->offer_id !== null)) {
			$c = new Criteria(OfferPeer::DATABASE_NAME);
			$c->add(OfferPeer::ID, $this->offer_id);
			$this->aOffer = OfferPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOffer->addPropertys($this);
			 */
		}
		return $this->aOffer;
	}

	/**
	 * Declares an association between this object and a Type object.
	 *
	 * @param      Type $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setType(Type $v = null)
	{
		if ($v === null) {
			$this->setTypeId(NULL);
		} else {
			$this->setTypeId($v->getId());
		}

		$this->aType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Type object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated Type object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Type The associated Type object.
	 * @throws     PropelException
	 */
	public function getType(PropelPDO $con = null)
	{
		if ($this->aType === null && ($this->type_id !== null)) {
			$c = new Criteria(TypePeer::DATABASE_NAME);
			$c->add(TypePeer::ID, $this->type_id);
			$this->aType = TypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aType->addPropertys($this);
			 */
		}
		return $this->aType;
	}

	/**
	 * Declares an association between this object and a Typology object.
	 *
	 * @param      Typology $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTypology(Typology $v = null)
	{
		if ($v === null) {
			$this->setTypologyId(NULL);
		} else {
			$this->setTypologyId($v->getId());
		}

		$this->aTypology = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Typology object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated Typology object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Typology The associated Typology object.
	 * @throws     PropelException
	 */
	public function getTypology(PropelPDO $con = null)
	{
		if ($this->aTypology === null && ($this->typology_id !== null)) {
			$c = new Criteria(TypologyPeer::DATABASE_NAME);
			$c->add(TypologyPeer::ID, $this->typology_id);
			$this->aTypology = TypologyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTypology->addPropertys($this);
			 */
		}
		return $this->aTypology;
	}

	/**
	 * Declares an association between this object and a State object.
	 *
	 * @param      State $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setState(State $v = null)
	{
		if ($v === null) {
			$this->setStateId(NULL);
		} else {
			$this->setStateId($v->getId());
		}

		$this->aState = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the State object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated State object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     State The associated State object.
	 * @throws     PropelException
	 */
	public function getState(PropelPDO $con = null)
	{
		if ($this->aState === null && ($this->state_id !== null)) {
			$c = new Criteria(StatePeer::DATABASE_NAME);
			$c->add(StatePeer::ID, $this->state_id);
			$this->aState = StatePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aState->addPropertys($this);
			 */
		}
		return $this->aState;
	}

	/**
	 * Declares an association between this object and a Kitchen object.
	 *
	 * @param      Kitchen $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setKitchen(Kitchen $v = null)
	{
		if ($v === null) {
			$this->setKitchenId(NULL);
		} else {
			$this->setKitchenId($v->getId());
		}

		$this->aKitchen = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Kitchen object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated Kitchen object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Kitchen The associated Kitchen object.
	 * @throws     PropelException
	 */
	public function getKitchen(PropelPDO $con = null)
	{
		if ($this->aKitchen === null && ($this->kitchen_id !== null)) {
			$c = new Criteria(KitchenPeer::DATABASE_NAME);
			$c->add(KitchenPeer::ID, $this->kitchen_id);
			$this->aKitchen = KitchenPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aKitchen->addPropertys($this);
			 */
		}
		return $this->aKitchen;
	}

	/**
	 * Declares an association between this object and a sfAssetFolder object.
	 *
	 * @param      sfAssetFolder $v
	 * @return     Property The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfAssetFolder(sfAssetFolder $v = null)
	{
		if ($v === null) {
			$this->setSfAssetFolderId(NULL);
		} else {
			$this->setSfAssetFolderId($v->getId());
		}

		$this->asfAssetFolder = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfAssetFolder object, it will not be re-added.
		if ($v !== null) {
			$v->addProperty($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfAssetFolder object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfAssetFolder The associated sfAssetFolder object.
	 * @throws     PropelException
	 */
	public function getsfAssetFolder(PropelPDO $con = null)
	{
		if ($this->asfAssetFolder === null && ($this->sf_asset_folder_id !== null)) {
			$c = new Criteria(sfAssetFolderPeer::DATABASE_NAME);
			$c->add(sfAssetFolderPeer::ID, $this->sf_asset_folder_id);
			$this->asfAssetFolder = sfAssetFolderPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfAssetFolder->addPropertys($this);
			 */
		}
		return $this->asfAssetFolder;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aOffer = null;
			$this->aType = null;
			$this->aTypology = null;
			$this->aState = null;
			$this->aKitchen = null;
			$this->asfAssetFolder = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseProperty:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseProperty::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseProperty
